{
	"info": {
		"_postman_id": "5f8f8549-8935-40f4-9cc8-6c32d9b7c83a",
		"name": "MentalLeaf API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Nuke",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "69f857e0-9fe6-4d14-aefb-c831f2c100c1",
						"exec": [
							"pm.test(\"Correct response check\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/nuke",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"nuke"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user bad password 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "712b0d20-869e-4ab1-98ab-d3ab1a5aaccc",
						"exec": [
							"pm.test(\"Correct response check\", function () {\r",
							"    pm.response.to.have.body({\"data\":{\"addUser\":{\"reason\":\"Password is not of the following: Minimum eight characters, at least one letter, one number and one special character\"}}})\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation{\r\n  addUser(input: {email: \"email@example.com\", password: \"password\"}){\r\n    ... on User {\r\n      email\r\n    }\r\n    ... on InvalidInput{\r\n      reason\r\n    }\r\n    ... on AddForbidden{\r\n      reason\r\n    }\r\n  }\r\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "http://localhost:5000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user bad password 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "edfdb74e-e988-48d7-a773-f6d1d2b550a7",
						"exec": [
							"pm.test(\"Correct response check\", function () {\r",
							"    pm.response.to.have.body({\"data\":{\"addUser\":{\"reason\":\"Password is not of the following: Minimum eight characters, at least one letter, one number and one special character\"}}})\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation{\r\n  addUser(input: {email: \"email@example.com\", password: \"Password1\"}){\r\n    ... on User {\r\n      email\r\n    }\r\n    ... on InvalidInput{\r\n      reason\r\n    }\r\n    ... on AddForbidden{\r\n      reason\r\n    }\r\n  }\r\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "http://localhost:5000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user bad password 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0e55fbbb-69e7-43d7-a9d0-214ca588f031",
						"exec": [
							"pm.test(\"Correct response check\", function () {\r",
							"    pm.response.to.have.body({\"data\":{\"addUser\":{\"reason\":\"Password is not of the following: Minimum eight characters, at least one letter, one number and one special character\"}}})\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation{\r\n  addUser(input: {email: \"email@example.com\", password: \"Pword1!\"}){\r\n    ... on User {\r\n      email\r\n    }\r\n    ... on InvalidInput{\r\n      reason\r\n    }\r\n    ... on AddForbidden{\r\n      reason\r\n    }\r\n  }\r\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "http://localhost:5000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f92d8352-16eb-4759-81d7-11d7a77f7135",
						"exec": [
							"pm.test(\"Correct response check\", function () {\r",
							"    pm.response.to.have.body({\r",
							"    \"data\": {\r",
							"        \"addUser\": {\r",
							"            \"email\": \"email@example.com\"\r",
							"        }\r",
							"    }\r",
							"})\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation{\r\n  addUser(input: {email: \"email@example.com\", password: \"Password123!\"}){\r\n    ... on User {\r\n      email\r\n    }\r\n    ... on InvalidInput{\r\n      reason\r\n    }\r\n    ... on AddForbidden{\r\n      reason\r\n    }\r\n  }\r\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "http://localhost:5000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user duplicate user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "df3af5a1-d231-411c-b4a3-082da813ce9c",
						"exec": [
							"pm.test(\"Correct response check\", function () {\r",
							"    pm.response.to.have.body({\r",
							"    \"data\": {\r",
							"        \"addUser\": {\r",
							"            \"reason\": \"Email is already in the system\"\r",
							"        }\r",
							"    }\r",
							"})\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation{\r\n  addUser(input: {email: \"email@example.com\", password: \"Password123!\"}){\r\n    ... on User {\r\n      email\r\n    }\r\n    ... on InvalidInput{\r\n      reason\r\n    }\r\n    ... on AddForbidden{\r\n      reason\r\n    }\r\n  }\r\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "http://localhost:5000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login user wrong password",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b914fa55-9cc6-490d-a075-1dacb29a6524",
						"exec": [
							"pm.test(\"Correct response check\", function () {\r",
							"    pm.response.to.have.body({\r",
							"    \"data\": {\r",
							"        \"loginUser\": {\r",
							"            \"reason\": \"Username or password is incorrect\"\r",
							"        }\r",
							"    }\r",
							"})\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation{\r\n  loginUser(input: {email: \"email@example.com\", password: \"Passwod123!\"}){\r\n      ... on Tokens {\r\n      accessToken\r\n      refreshToken\r\n    }\r\n    ... on InvalidInput {\r\n      reason\r\n    }\r\n  }\r\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "http://localhost:5000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9ecec68c-8016-4630-88f9-fcec55d43053",
						"exec": [
							"pm.test(\"Correct response check\", function () {\r",
							"    pm.expect(pm.response.json().data.loginUser).to.have.property('accessToken')\r",
							"\r",
							"    pm.environment.set(\"accessToken\", pm.response.json().data.loginUser.accessToken);\r",
							"    pm.environment.set(\"refreshToken\", pm.response.json().data.loginUser.refreshToken);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation{\r\n  loginUser(input: {email: \"email@example.com\", password: \"Password123!\"}){\r\n      ... on Tokens {\r\n      accessToken\r\n      refreshToken\r\n    }\r\n    ... on InvalidInput {\r\n      reason\r\n    }\r\n  }\r\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "http://localhost:5000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Refersh user bad token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3dcd5d17-f56a-4b46-94e5-2ff89eafac62",
						"exec": [
							"pm.test(\"Correct response check\", function () {\r",
							"    pm.response.to.have.body({\r",
							"        \"data\": {\r",
							"            \"refreshUser\": {\r",
							"                \"reason\": \"Refresh token does not exist\"\r",
							"            }\r",
							"        }\r",
							"    })\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation{\r\n  refreshUser(input: { refreshToken: \"123\"}) {\r\n      ...on AccessToken {\r\n          accessToken\r\n      }\r\n      ...on InvalidInput {\r\n          reason\r\n      }\r\n  }\r\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "http://localhost:5000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Refersh user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "53249cca-fcba-46e5-99ae-ffe91bdbd3fc",
						"exec": [
							"pm.test(\"Correct response check\", function () {\r",
							"    pm.expect(pm.response.json().data.refreshUser).to.have.property('accessToken')\r",
							"\r",
							"    pm.environment.set(\"accessToken\", pm.response.json().data.refreshUser.accessToken);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation{\r\n  refreshUser(input: { refreshToken: \"{{refreshToken}}\"}) {\r\n      ...on AccessToken {\r\n          accessToken\r\n      }\r\n      ...on InvalidInput {\r\n          reason\r\n      }\r\n  }\r\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "http://localhost:5000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout user bad refresh token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a7ced7f1-bdf4-4993-8cab-2d013c569f2f",
						"exec": [
							"pm.test(\"Correct response check\", function () {\r",
							"        pm.response.to.have.body({\r",
							"        \"data\": {\r",
							"            \"logoutUser\": {\r",
							"                \"success\": false\r",
							"            }\r",
							"        }\r",
							"    })\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation{\r\n  logoutUser(input: { refreshToken: \"123\" }) {\r\n      success\r\n  }\r\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "http://localhost:5000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6a8de2b2-2037-40a6-9c59-27f909f7e673",
						"exec": [
							"pm.test(\"Correct response check\", function () {\r",
							"        pm.response.to.have.body({\r",
							"        \"data\": {\r",
							"            \"logoutUser\": {\r",
							"                \"success\": true\r",
							"            }\r",
							"        }\r",
							"    })\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation{\r\n  logoutUser(input: { refreshToken: \"{{refreshToken}}\" }) {\r\n      success\r\n  }\r\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "http://localhost:5000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "66f32ba7-44b5-483b-b3f9-341b062d3921",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "0c367b1d-7638-41fa-b5f3-47e050d3048a",
				"type": "text/javascript",
				"exec": [
					"tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
					"tests[\"[INFO] Response: \" + responseBody] = true;"
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}